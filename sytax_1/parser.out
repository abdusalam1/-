Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    COMMENT
    DOWNTO
    FALSE
    NUM
    READIN
    RECORD
    REPEAT
    TRUE
    TYPE
    UNTIL
    WHILE
    WRITEIN

Grammar

Rule 0     S' -> programstruct
Rule 1     programstruct -> program_head SEMICOLON program_body POINT
Rule 2     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 3     program_head -> PROGRAM ID
Rule 4     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 5     empty -> <empty>
Rule 6     idlist -> ID
Rule 7     idlist -> idlist COM ID
Rule 8     const_declarations -> empty
Rule 9     const_declarations -> CONST const_declaration SEMICOLON
Rule 10    const_declaration -> ID EQUAL const_value
Rule 11    const_declaration -> const_declaration SEMICOLON ID EQUAL const_value
Rule 12    const_value -> ADDOP num
Rule 13    const_value -> num
Rule 14    const_value -> LETTERS
Rule 15    num -> DIGITS fraction
Rule 16    num -> DIGITS
Rule 17    fraction -> POINT DIGITS
Rule 18    var_declarations -> VAR var_declaration SEMICOLON
Rule 19    var_declarations -> empty
Rule 20    var_declaration -> idlist COLON type
Rule 21    var_declaration -> var_declaration SEMICOLON idlist COLON type
Rule 22    type -> basic_type
Rule 23    type -> ARRAY LBRACKET period RBRACKET OF basic_type
Rule 24    basic_type -> INTEGER
Rule 25    basic_type -> REAL
Rule 26    basic_type -> BOOLEAN
Rule 27    basic_type -> CHAR
Rule 28    period -> DIGITS DOT DIGITS
Rule 29    period -> period COM DIGITS DOT DIGITS
Rule 30    subprogram_declarations -> subprogram_declarations subprogram SEMICOLON
Rule 31    subprogram_declarations -> empty
Rule 32    subprogram -> subprogram_head SEMICOLON subprogram_body
Rule 33    subprogram_head -> PROCEDURE ID formal_parameter
Rule 34    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 35    formal_parameter -> LPAREN parameter_list RPAREN
Rule 36    formal_parameter -> empty
Rule 37    parameter_list -> parameter
Rule 38    parameter_list -> parameter_list SEMICOLON parameter
Rule 39    parameter -> var_parameter
Rule 40    parameter -> value_parameter
Rule 41    var_parameter -> VAR value_parameter
Rule 42    value_parameter -> idlist COLON basic_type
Rule 43    subprogram_body -> const_declarations var_declarations compound_statement
Rule 44    compound_statement -> BEGIN statement_list END
Rule 45    statement_list -> statement
Rule 46    statement_list -> statement_list SEMICOLON statement
Rule 47    statement -> empty
Rule 48    statement -> variable ASSIGNOP expression
Rule 49    statement -> func_id ASSIGNOP expression
Rule 50    func_id -> ID
Rule 51    statement -> procedure_call
Rule 52    statement -> compound_statement
Rule 53    statement -> IF expression THEN statement else_part
Rule 54    statement -> FOR ID ASSIGNOP expression TO expression DO statement
Rule 55    statement -> READ LPAREN variable_list RPAREN
Rule 56    statement -> WRITE LPAREN expression_list RPAREN
Rule 57    variable_list -> variable
Rule 58    variable_list -> variable_list COM variable
Rule 59    variable -> ID id_varpart
Rule 60    id_varpart -> empty
Rule 61    id_varpart -> LBRACKET expression_list RBRACKET
Rule 62    procedure_call -> ID
Rule 63    procedure_call -> ID LPAREN expression_list RPAREN
Rule 64    else_part -> ELSE statement
Rule 65    else_part -> empty
Rule 66    expression_list -> expression
Rule 67    expression_list -> expression_list COM expression
Rule 68    expression -> simple_expression
Rule 69    expression -> simple_expression RELOP simple_expression
Rule 70    simple_expression -> term
Rule 71    simple_expression -> simple_expression ADDOP term
Rule 72    term -> factor
Rule 73    term -> term MULOP factor
Rule 74    factor -> num
Rule 75    factor -> variable
Rule 76    factor -> LPAREN expression RPAREN
Rule 77    factor -> ID LPAREN expression_list RPAREN
Rule 78    factor -> NOT factor
Rule 79    factor -> ADDOP factor

Terminals, with rules where they appear

ADDOP                : 12 71 79
ARRAY                : 23
ASSIGNOP             : 48 49 54
BEGIN                : 44
BOOLEAN              : 26
CASE                 : 
CHAR                 : 27
COLON                : 20 21 34 42
COM                  : 7 29 58 67
COMMENT              : 
CONST                : 9
DIGITS               : 15 16 17 28 28 29 29
DO                   : 54
DOT                  : 28 29
DOWNTO               : 
ELSE                 : 64
END                  : 44
EQUAL                : 10 11
FALSE                : 
FOR                  : 54
FUNCTION             : 34
ID                   : 2 3 6 7 10 11 33 34 50 54 59 62 63 77
IF                   : 53
INTEGER              : 24
LBRACKET             : 23 61
LETTERS              : 14
LPAREN               : 2 35 55 56 63 76 77
MULOP                : 73
NOT                  : 78
NUM                  : 
OF                   : 23
POINT                : 1 17
PROCEDURE            : 33
PROGRAM              : 2 3
RBRACKET             : 23 61
READ                 : 55
READIN               : 
REAL                 : 25
RECORD               : 
RELOP                : 69
REPEAT               : 
RPAREN               : 2 35 55 56 63 76 77
SEMICOLON            : 1 9 11 18 21 30 32 38 46
THEN                 : 53
TO                   : 54
TRUE                 : 
TYPE                 : 
UNTIL                : 
VAR                  : 18 41
WHILE                : 
WRITE                : 56
WRITEIN              : 
error                : 

Nonterminals, with rules where they appear

basic_type           : 22 23 34 42
compound_statement   : 4 43 52
const_declaration    : 9 11
const_declarations   : 4 43
const_value          : 10 11
else_part            : 53
empty                : 8 19 31 36 47 60 65
expression           : 48 49 53 54 54 66 67 76
expression_list      : 56 61 63 67 77
factor               : 72 73 78 79
formal_parameter     : 33 34
fraction             : 15
func_id              : 49
id_varpart           : 59
idlist               : 2 7 20 21 42
num                  : 12 13 74
parameter            : 37 38
parameter_list       : 35 38
period               : 23 29
procedure_call       : 51
program_body         : 1
program_head         : 1
programstruct        : 0
simple_expression    : 68 69 69 71
statement            : 45 46 53 54 64
statement_list       : 44 46
subprogram           : 30
subprogram_body      : 32
subprogram_declarations : 4 30
subprogram_head      : 32
term                 : 70 71 73
type                 : 20 21
value_parameter      : 40 41
var_declaration      : 18 21
var_declarations     : 4 43
var_parameter        : 39
variable             : 48 57 58 75
variable_list        : 55 58

Parsing method: LALR

state 0

    (0) S' -> . programstruct
    (1) programstruct -> . program_head SEMICOLON program_body POINT
    (2) program_head -> . PROGRAM ID LPAREN idlist RPAREN
    (3) program_head -> . PROGRAM ID

    PROGRAM         shift and go to state 3

    programstruct                  shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> programstruct .



state 2

    (1) programstruct -> program_head . SEMICOLON program_body POINT

    SEMICOLON       shift and go to state 4


state 3

    (2) program_head -> PROGRAM . ID LPAREN idlist RPAREN
    (3) program_head -> PROGRAM . ID

    ID              shift and go to state 5


state 4

    (1) programstruct -> program_head SEMICOLON . program_body POINT
    (4) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (8) const_declarations -> . empty
    (9) const_declarations -> . CONST const_declaration SEMICOLON
    (5) empty -> .

    CONST           shift and go to state 9
    VAR             reduce using rule 5 (empty -> .)
    BEGIN           reduce using rule 5 (empty -> .)
    PROCEDURE       reduce using rule 5 (empty -> .)
    FUNCTION        reduce using rule 5 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 8

state 5

    (2) program_head -> PROGRAM ID . LPAREN idlist RPAREN
    (3) program_head -> PROGRAM ID .

    LPAREN          shift and go to state 10
    SEMICOLON       reduce using rule 3 (program_head -> PROGRAM ID .)


state 6

    (1) programstruct -> program_head SEMICOLON program_body . POINT

    POINT           shift and go to state 11


state 7

    (4) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (18) var_declarations -> . VAR var_declaration SEMICOLON
    (19) var_declarations -> . empty
    (5) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 5 (empty -> .)
    PROCEDURE       reduce using rule 5 (empty -> .)
    FUNCTION        reduce using rule 5 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (8) const_declarations -> empty .

    VAR             reduce using rule 8 (const_declarations -> empty .)
    BEGIN           reduce using rule 8 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 8 (const_declarations -> empty .)
    FUNCTION        reduce using rule 8 (const_declarations -> empty .)


state 9

    (9) const_declarations -> CONST . const_declaration SEMICOLON
    (10) const_declaration -> . ID EQUAL const_value
    (11) const_declaration -> . const_declaration SEMICOLON ID EQUAL const_value

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 10

    (2) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) programstruct -> program_head SEMICOLON program_body POINT .

    $end            reduce using rule 1 (programstruct -> program_head SEMICOLON program_body POINT .)


state 12

    (4) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (30) subprogram_declarations -> . subprogram_declarations subprogram SEMICOLON
    (31) subprogram_declarations -> . empty
    (5) empty -> .

    BEGIN           reduce using rule 5 (empty -> .)
    PROCEDURE       reduce using rule 5 (empty -> .)
    FUNCTION        reduce using rule 5 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (18) var_declarations -> VAR . var_declaration SEMICOLON
    (20) var_declaration -> . idlist COLON type
    (21) var_declaration -> . var_declaration SEMICOLON idlist COLON type
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (19) var_declarations -> empty .

    BEGIN           reduce using rule 19 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 19 (var_declarations -> empty .)
    FUNCTION        reduce using rule 19 (var_declarations -> empty .)


state 15

    (9) const_declarations -> CONST const_declaration . SEMICOLON
    (11) const_declaration -> const_declaration . SEMICOLON ID EQUAL const_value

    SEMICOLON       shift and go to state 23


state 16

    (10) const_declaration -> ID . EQUAL const_value

    EQUAL           shift and go to state 24


state 17

    (6) idlist -> ID .

    RPAREN          reduce using rule 6 (idlist -> ID .)
    COM             reduce using rule 6 (idlist -> ID .)
    COLON           reduce using rule 6 (idlist -> ID .)


state 18

    (2) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (7) idlist -> idlist . COM ID

    RPAREN          shift and go to state 25
    COM             shift and go to state 26


state 19

    (4) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (30) subprogram_declarations -> subprogram_declarations . subprogram SEMICOLON
    (44) compound_statement -> . BEGIN statement_list END
    (32) subprogram -> . subprogram_head SEMICOLON subprogram_body
    (33) subprogram_head -> . PROCEDURE ID formal_parameter
    (34) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 31
    FUNCTION        shift and go to state 32

    compound_statement             shift and go to state 27
    subprogram                     shift and go to state 28
    subprogram_head                shift and go to state 30

state 20

    (31) subprogram_declarations -> empty .

    BEGIN           reduce using rule 31 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 31 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 31 (subprogram_declarations -> empty .)


state 21

    (18) var_declarations -> VAR var_declaration . SEMICOLON
    (21) var_declaration -> var_declaration . SEMICOLON idlist COLON type

    SEMICOLON       shift and go to state 33


state 22

    (20) var_declaration -> idlist . COLON type
    (7) idlist -> idlist . COM ID

    COLON           shift and go to state 34
    COM             shift and go to state 26


state 23

    (9) const_declarations -> CONST const_declaration SEMICOLON .
    (11) const_declaration -> const_declaration SEMICOLON . ID EQUAL const_value

    VAR             reduce using rule 9 (const_declarations -> CONST const_declaration SEMICOLON .)
    BEGIN           reduce using rule 9 (const_declarations -> CONST const_declaration SEMICOLON .)
    PROCEDURE       reduce using rule 9 (const_declarations -> CONST const_declaration SEMICOLON .)
    FUNCTION        reduce using rule 9 (const_declarations -> CONST const_declaration SEMICOLON .)
    ID              shift and go to state 35


state 24

    (10) const_declaration -> ID EQUAL . const_value
    (12) const_value -> . ADDOP num
    (13) const_value -> . num
    (14) const_value -> . LETTERS
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS

    ADDOP           shift and go to state 37
    LETTERS         shift and go to state 39
    DIGITS          shift and go to state 40

    const_value                    shift and go to state 36
    num                            shift and go to state 38

state 25

    (2) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMICOLON       reduce using rule 2 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 26

    (7) idlist -> idlist COM . ID

    ID              shift and go to state 41


state 27

    (4) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    POINT           reduce using rule 4 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 28

    (30) subprogram_declarations -> subprogram_declarations subprogram . SEMICOLON

    SEMICOLON       shift and go to state 42


state 29

    (44) compound_statement -> BEGIN . statement_list END
    (45) statement_list -> . statement
    (46) statement_list -> . statement_list SEMICOLON statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGNOP expression
    (49) statement -> . func_id ASSIGNOP expression
    (51) statement -> . procedure_call
    (52) statement -> . compound_statement
    (53) statement -> . IF expression THEN statement else_part
    (54) statement -> . FOR ID ASSIGNOP expression TO expression DO statement
    (55) statement -> . READ LPAREN variable_list RPAREN
    (56) statement -> . WRITE LPAREN expression_list RPAREN
    (5) empty -> .
    (59) variable -> . ID id_varpart
    (50) func_id -> . ID
    (62) procedure_call -> . ID
    (63) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 50
    FOR             shift and go to state 51
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ID              shift and go to state 52
    BEGIN           shift and go to state 29

    statement_list                 shift and go to state 43
    statement                      shift and go to state 44
    empty                          shift and go to state 45
    variable                       shift and go to state 46
    func_id                        shift and go to state 47
    procedure_call                 shift and go to state 48
    compound_statement             shift and go to state 49

state 30

    (32) subprogram -> subprogram_head . SEMICOLON subprogram_body

    SEMICOLON       shift and go to state 55


state 31

    (33) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 56


state 32

    (34) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 57


state 33

    (18) var_declarations -> VAR var_declaration SEMICOLON .
    (21) var_declaration -> var_declaration SEMICOLON . idlist COLON type
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    BEGIN           reduce using rule 18 (var_declarations -> VAR var_declaration SEMICOLON .)
    PROCEDURE       reduce using rule 18 (var_declarations -> VAR var_declaration SEMICOLON .)
    FUNCTION        reduce using rule 18 (var_declarations -> VAR var_declaration SEMICOLON .)
    ID              shift and go to state 17

    idlist                         shift and go to state 58

state 34

    (20) var_declaration -> idlist COLON . type
    (22) type -> . basic_type
    (23) type -> . ARRAY LBRACKET period RBRACKET OF basic_type
    (24) basic_type -> . INTEGER
    (25) basic_type -> . REAL
    (26) basic_type -> . BOOLEAN
    (27) basic_type -> . CHAR

    ARRAY           shift and go to state 61
    INTEGER         shift and go to state 62
    REAL            shift and go to state 63
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 65

    type                           shift and go to state 59
    basic_type                     shift and go to state 60

state 35

    (11) const_declaration -> const_declaration SEMICOLON ID . EQUAL const_value

    EQUAL           shift and go to state 66


state 36

    (10) const_declaration -> ID EQUAL const_value .

    SEMICOLON       reduce using rule 10 (const_declaration -> ID EQUAL const_value .)


state 37

    (12) const_value -> ADDOP . num
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS

    DIGITS          shift and go to state 40

    num                            shift and go to state 67

state 38

    (13) const_value -> num .

    SEMICOLON       reduce using rule 13 (const_value -> num .)


state 39

    (14) const_value -> LETTERS .

    SEMICOLON       reduce using rule 14 (const_value -> LETTERS .)


state 40

    (15) num -> DIGITS . fraction
    (16) num -> DIGITS .
    (17) fraction -> . POINT DIGITS

    SEMICOLON       reduce using rule 16 (num -> DIGITS .)
    MULOP           reduce using rule 16 (num -> DIGITS .)
    RELOP           reduce using rule 16 (num -> DIGITS .)
    ADDOP           reduce using rule 16 (num -> DIGITS .)
    THEN            reduce using rule 16 (num -> DIGITS .)
    END             reduce using rule 16 (num -> DIGITS .)
    ELSE            reduce using rule 16 (num -> DIGITS .)
    RPAREN          reduce using rule 16 (num -> DIGITS .)
    COM             reduce using rule 16 (num -> DIGITS .)
    RBRACKET        reduce using rule 16 (num -> DIGITS .)
    TO              reduce using rule 16 (num -> DIGITS .)
    DO              reduce using rule 16 (num -> DIGITS .)
    POINT           shift and go to state 69

    fraction                       shift and go to state 68

state 41

    (7) idlist -> idlist COM ID .

    RPAREN          reduce using rule 7 (idlist -> idlist COM ID .)
    COM             reduce using rule 7 (idlist -> idlist COM ID .)
    COLON           reduce using rule 7 (idlist -> idlist COM ID .)


state 42

    (30) subprogram_declarations -> subprogram_declarations subprogram SEMICOLON .

    BEGIN           reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMICOLON .)
    PROCEDURE       reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMICOLON .)
    FUNCTION        reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMICOLON .)


state 43

    (44) compound_statement -> BEGIN statement_list . END
    (46) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 70
    SEMICOLON       shift and go to state 71


state 44

    (45) statement_list -> statement .

    END             reduce using rule 45 (statement_list -> statement .)
    SEMICOLON       reduce using rule 45 (statement_list -> statement .)


state 45

    (47) statement -> empty .

    END             reduce using rule 47 (statement -> empty .)
    SEMICOLON       reduce using rule 47 (statement -> empty .)
    ELSE            reduce using rule 47 (statement -> empty .)


state 46

    (48) statement -> variable . ASSIGNOP expression

    ASSIGNOP        shift and go to state 72


state 47

    (49) statement -> func_id . ASSIGNOP expression

    ASSIGNOP        shift and go to state 73


state 48

    (51) statement -> procedure_call .

    END             reduce using rule 51 (statement -> procedure_call .)
    SEMICOLON       reduce using rule 51 (statement -> procedure_call .)
    ELSE            reduce using rule 51 (statement -> procedure_call .)


state 49

    (52) statement -> compound_statement .

    END             reduce using rule 52 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 52 (statement -> compound_statement .)
    ELSE            reduce using rule 52 (statement -> compound_statement .)


state 50

    (53) statement -> IF . expression THEN statement else_part
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 74
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 51

    (54) statement -> FOR . ID ASSIGNOP expression TO expression DO statement

    ID              shift and go to state 84


state 52

    (59) variable -> ID . id_varpart
    (50) func_id -> ID .
    (62) procedure_call -> ID .
    (63) procedure_call -> ID . LPAREN expression_list RPAREN
    (60) id_varpart -> . empty
    (61) id_varpart -> . LBRACKET expression_list RBRACKET
    (5) empty -> .

  ! reduce/reduce conflict for ASSIGNOP resolved using rule 5 (empty -> .)
    END             reduce using rule 62 (procedure_call -> ID .)
    SEMICOLON       reduce using rule 62 (procedure_call -> ID .)
    ELSE            reduce using rule 62 (procedure_call -> ID .)
    LPAREN          shift and go to state 86
    LBRACKET        shift and go to state 88
    ASSIGNOP        reduce using rule 5 (empty -> .)

  ! ASSIGNOP        [ reduce using rule 50 (func_id -> ID .) ]

    id_varpart                     shift and go to state 85
    empty                          shift and go to state 87

state 53

    (55) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 89


state 54

    (56) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 90


state 55

    (32) subprogram -> subprogram_head SEMICOLON . subprogram_body
    (43) subprogram_body -> . const_declarations var_declarations compound_statement
    (8) const_declarations -> . empty
    (9) const_declarations -> . CONST const_declaration SEMICOLON
    (5) empty -> .

    CONST           shift and go to state 9
    VAR             reduce using rule 5 (empty -> .)
    BEGIN           reduce using rule 5 (empty -> .)

    subprogram_body                shift and go to state 91
    const_declarations             shift and go to state 92
    empty                          shift and go to state 8

state 56

    (33) subprogram_head -> PROCEDURE ID . formal_parameter
    (35) formal_parameter -> . LPAREN parameter_list RPAREN
    (36) formal_parameter -> . empty
    (5) empty -> .

    LPAREN          shift and go to state 94
    SEMICOLON       reduce using rule 5 (empty -> .)

    formal_parameter               shift and go to state 93
    empty                          shift and go to state 95

state 57

    (34) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (35) formal_parameter -> . LPAREN parameter_list RPAREN
    (36) formal_parameter -> . empty
    (5) empty -> .

    LPAREN          shift and go to state 94
    COLON           reduce using rule 5 (empty -> .)

    formal_parameter               shift and go to state 96
    empty                          shift and go to state 95

state 58

    (21) var_declaration -> var_declaration SEMICOLON idlist . COLON type
    (7) idlist -> idlist . COM ID

    COLON           shift and go to state 97
    COM             shift and go to state 26


state 59

    (20) var_declaration -> idlist COLON type .

    SEMICOLON       reduce using rule 20 (var_declaration -> idlist COLON type .)


state 60

    (22) type -> basic_type .

    SEMICOLON       reduce using rule 22 (type -> basic_type .)


state 61

    (23) type -> ARRAY . LBRACKET period RBRACKET OF basic_type

    LBRACKET        shift and go to state 98


state 62

    (24) basic_type -> INTEGER .

    SEMICOLON       reduce using rule 24 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 24 (basic_type -> INTEGER .)


state 63

    (25) basic_type -> REAL .

    SEMICOLON       reduce using rule 25 (basic_type -> REAL .)
    RPAREN          reduce using rule 25 (basic_type -> REAL .)


state 64

    (26) basic_type -> BOOLEAN .

    SEMICOLON       reduce using rule 26 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 26 (basic_type -> BOOLEAN .)


state 65

    (27) basic_type -> CHAR .

    SEMICOLON       reduce using rule 27 (basic_type -> CHAR .)
    RPAREN          reduce using rule 27 (basic_type -> CHAR .)


state 66

    (11) const_declaration -> const_declaration SEMICOLON ID EQUAL . const_value
    (12) const_value -> . ADDOP num
    (13) const_value -> . num
    (14) const_value -> . LETTERS
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS

    ADDOP           shift and go to state 37
    LETTERS         shift and go to state 39
    DIGITS          shift and go to state 40

    const_value                    shift and go to state 99
    num                            shift and go to state 38

state 67

    (12) const_value -> ADDOP num .

    SEMICOLON       reduce using rule 12 (const_value -> ADDOP num .)


state 68

    (15) num -> DIGITS fraction .

    SEMICOLON       reduce using rule 15 (num -> DIGITS fraction .)
    MULOP           reduce using rule 15 (num -> DIGITS fraction .)
    RELOP           reduce using rule 15 (num -> DIGITS fraction .)
    ADDOP           reduce using rule 15 (num -> DIGITS fraction .)
    THEN            reduce using rule 15 (num -> DIGITS fraction .)
    END             reduce using rule 15 (num -> DIGITS fraction .)
    ELSE            reduce using rule 15 (num -> DIGITS fraction .)
    RPAREN          reduce using rule 15 (num -> DIGITS fraction .)
    COM             reduce using rule 15 (num -> DIGITS fraction .)
    RBRACKET        reduce using rule 15 (num -> DIGITS fraction .)
    TO              reduce using rule 15 (num -> DIGITS fraction .)
    DO              reduce using rule 15 (num -> DIGITS fraction .)


state 69

    (17) fraction -> POINT . DIGITS

    DIGITS          shift and go to state 100


state 70

    (44) compound_statement -> BEGIN statement_list END .

    POINT           reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 44 (compound_statement -> BEGIN statement_list END .)


state 71

    (46) statement_list -> statement_list SEMICOLON . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGNOP expression
    (49) statement -> . func_id ASSIGNOP expression
    (51) statement -> . procedure_call
    (52) statement -> . compound_statement
    (53) statement -> . IF expression THEN statement else_part
    (54) statement -> . FOR ID ASSIGNOP expression TO expression DO statement
    (55) statement -> . READ LPAREN variable_list RPAREN
    (56) statement -> . WRITE LPAREN expression_list RPAREN
    (5) empty -> .
    (59) variable -> . ID id_varpart
    (50) func_id -> . ID
    (62) procedure_call -> . ID
    (63) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 50
    FOR             shift and go to state 51
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ID              shift and go to state 52
    BEGIN           shift and go to state 29

    statement                      shift and go to state 101
    empty                          shift and go to state 45
    variable                       shift and go to state 46
    func_id                        shift and go to state 47
    procedure_call                 shift and go to state 48
    compound_statement             shift and go to state 49

state 72

    (48) statement -> variable ASSIGNOP . expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    variable                       shift and go to state 80
    expression                     shift and go to state 102
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79

state 73

    (49) statement -> func_id ASSIGNOP . expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 103
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 74

    (53) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 104


state 75

    (68) expression -> simple_expression .
    (69) expression -> simple_expression . RELOP simple_expression
    (71) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 68 (expression -> simple_expression .)
    END             reduce using rule 68 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 68 (expression -> simple_expression .)
    ELSE            reduce using rule 68 (expression -> simple_expression .)
    RPAREN          reduce using rule 68 (expression -> simple_expression .)
    COM             reduce using rule 68 (expression -> simple_expression .)
    RBRACKET        reduce using rule 68 (expression -> simple_expression .)
    TO              reduce using rule 68 (expression -> simple_expression .)
    DO              reduce using rule 68 (expression -> simple_expression .)
    RELOP           shift and go to state 105
    ADDOP           shift and go to state 106


state 76

    (70) simple_expression -> term .
    (73) term -> term . MULOP factor

    RELOP           reduce using rule 70 (simple_expression -> term .)
    ADDOP           reduce using rule 70 (simple_expression -> term .)
    THEN            reduce using rule 70 (simple_expression -> term .)
    END             reduce using rule 70 (simple_expression -> term .)
    SEMICOLON       reduce using rule 70 (simple_expression -> term .)
    ELSE            reduce using rule 70 (simple_expression -> term .)
    RPAREN          reduce using rule 70 (simple_expression -> term .)
    COM             reduce using rule 70 (simple_expression -> term .)
    RBRACKET        reduce using rule 70 (simple_expression -> term .)
    TO              reduce using rule 70 (simple_expression -> term .)
    DO              reduce using rule 70 (simple_expression -> term .)
    MULOP           shift and go to state 107


state 77

    (79) factor -> ADDOP . factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    factor                         shift and go to state 108
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 78

    (72) term -> factor .

    MULOP           reduce using rule 72 (term -> factor .)
    RELOP           reduce using rule 72 (term -> factor .)
    ADDOP           reduce using rule 72 (term -> factor .)
    THEN            reduce using rule 72 (term -> factor .)
    END             reduce using rule 72 (term -> factor .)
    SEMICOLON       reduce using rule 72 (term -> factor .)
    ELSE            reduce using rule 72 (term -> factor .)
    RPAREN          reduce using rule 72 (term -> factor .)
    COM             reduce using rule 72 (term -> factor .)
    RBRACKET        reduce using rule 72 (term -> factor .)
    TO              reduce using rule 72 (term -> factor .)
    DO              reduce using rule 72 (term -> factor .)


state 79

    (74) factor -> num .

    MULOP           reduce using rule 74 (factor -> num .)
    RELOP           reduce using rule 74 (factor -> num .)
    ADDOP           reduce using rule 74 (factor -> num .)
    THEN            reduce using rule 74 (factor -> num .)
    END             reduce using rule 74 (factor -> num .)
    SEMICOLON       reduce using rule 74 (factor -> num .)
    ELSE            reduce using rule 74 (factor -> num .)
    RPAREN          reduce using rule 74 (factor -> num .)
    COM             reduce using rule 74 (factor -> num .)
    RBRACKET        reduce using rule 74 (factor -> num .)
    TO              reduce using rule 74 (factor -> num .)
    DO              reduce using rule 74 (factor -> num .)


state 80

    (75) factor -> variable .

    MULOP           reduce using rule 75 (factor -> variable .)
    RELOP           reduce using rule 75 (factor -> variable .)
    ADDOP           reduce using rule 75 (factor -> variable .)
    THEN            reduce using rule 75 (factor -> variable .)
    END             reduce using rule 75 (factor -> variable .)
    SEMICOLON       reduce using rule 75 (factor -> variable .)
    ELSE            reduce using rule 75 (factor -> variable .)
    RPAREN          reduce using rule 75 (factor -> variable .)
    COM             reduce using rule 75 (factor -> variable .)
    RBRACKET        reduce using rule 75 (factor -> variable .)
    TO              reduce using rule 75 (factor -> variable .)
    DO              reduce using rule 75 (factor -> variable .)


state 81

    (76) factor -> LPAREN . expression RPAREN
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 109
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 82

    (77) factor -> ID . LPAREN expression_list RPAREN
    (59) variable -> ID . id_varpart
    (60) id_varpart -> . empty
    (61) id_varpart -> . LBRACKET expression_list RBRACKET
    (5) empty -> .

    LPAREN          shift and go to state 110
    LBRACKET        shift and go to state 88
    MULOP           reduce using rule 5 (empty -> .)
    RELOP           reduce using rule 5 (empty -> .)
    ADDOP           reduce using rule 5 (empty -> .)
    THEN            reduce using rule 5 (empty -> .)
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ELSE            reduce using rule 5 (empty -> .)
    RPAREN          reduce using rule 5 (empty -> .)
    COM             reduce using rule 5 (empty -> .)
    RBRACKET        reduce using rule 5 (empty -> .)
    TO              reduce using rule 5 (empty -> .)
    DO              reduce using rule 5 (empty -> .)

    id_varpart                     shift and go to state 85
    empty                          shift and go to state 87

state 83

    (78) factor -> NOT . factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    factor                         shift and go to state 111
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 84

    (54) statement -> FOR ID . ASSIGNOP expression TO expression DO statement

    ASSIGNOP        shift and go to state 112


state 85

    (59) variable -> ID id_varpart .

    ASSIGNOP        reduce using rule 59 (variable -> ID id_varpart .)
    MULOP           reduce using rule 59 (variable -> ID id_varpart .)
    RELOP           reduce using rule 59 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 59 (variable -> ID id_varpart .)
    THEN            reduce using rule 59 (variable -> ID id_varpart .)
    END             reduce using rule 59 (variable -> ID id_varpart .)
    SEMICOLON       reduce using rule 59 (variable -> ID id_varpart .)
    ELSE            reduce using rule 59 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 59 (variable -> ID id_varpart .)
    COM             reduce using rule 59 (variable -> ID id_varpart .)
    RBRACKET        reduce using rule 59 (variable -> ID id_varpart .)
    TO              reduce using rule 59 (variable -> ID id_varpart .)
    DO              reduce using rule 59 (variable -> ID id_varpart .)


state 86

    (63) procedure_call -> ID LPAREN . expression_list RPAREN
    (66) expression_list -> . expression
    (67) expression_list -> . expression_list COM expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression_list                shift and go to state 113
    expression                     shift and go to state 114
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 87

    (60) id_varpart -> empty .

    ASSIGNOP        reduce using rule 60 (id_varpart -> empty .)
    MULOP           reduce using rule 60 (id_varpart -> empty .)
    RELOP           reduce using rule 60 (id_varpart -> empty .)
    ADDOP           reduce using rule 60 (id_varpart -> empty .)
    THEN            reduce using rule 60 (id_varpart -> empty .)
    END             reduce using rule 60 (id_varpart -> empty .)
    SEMICOLON       reduce using rule 60 (id_varpart -> empty .)
    ELSE            reduce using rule 60 (id_varpart -> empty .)
    RPAREN          reduce using rule 60 (id_varpart -> empty .)
    COM             reduce using rule 60 (id_varpart -> empty .)
    RBRACKET        reduce using rule 60 (id_varpart -> empty .)
    TO              reduce using rule 60 (id_varpart -> empty .)
    DO              reduce using rule 60 (id_varpart -> empty .)


state 88

    (61) id_varpart -> LBRACKET . expression_list RBRACKET
    (66) expression_list -> . expression
    (67) expression_list -> . expression_list COM expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression_list                shift and go to state 115
    expression                     shift and go to state 114
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 89

    (55) statement -> READ LPAREN . variable_list RPAREN
    (57) variable_list -> . variable
    (58) variable_list -> . variable_list COM variable
    (59) variable -> . ID id_varpart

    ID              shift and go to state 118

    variable_list                  shift and go to state 116
    variable                       shift and go to state 117

state 90

    (56) statement -> WRITE LPAREN . expression_list RPAREN
    (66) expression_list -> . expression
    (67) expression_list -> . expression_list COM expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression_list                shift and go to state 119
    expression                     shift and go to state 114
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 91

    (32) subprogram -> subprogram_head SEMICOLON subprogram_body .

    SEMICOLON       reduce using rule 32 (subprogram -> subprogram_head SEMICOLON subprogram_body .)


state 92

    (43) subprogram_body -> const_declarations . var_declarations compound_statement
    (18) var_declarations -> . VAR var_declaration SEMICOLON
    (19) var_declarations -> . empty
    (5) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 5 (empty -> .)

    var_declarations               shift and go to state 120
    empty                          shift and go to state 14

state 93

    (33) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMICOLON       reduce using rule 33 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 94

    (35) formal_parameter -> LPAREN . parameter_list RPAREN
    (37) parameter_list -> . parameter
    (38) parameter_list -> . parameter_list SEMICOLON parameter
    (39) parameter -> . var_parameter
    (40) parameter -> . value_parameter
    (41) var_parameter -> . VAR value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    VAR             shift and go to state 125
    ID              shift and go to state 17

    parameter_list                 shift and go to state 121
    parameter                      shift and go to state 122
    var_parameter                  shift and go to state 123
    value_parameter                shift and go to state 124
    idlist                         shift and go to state 126

state 95

    (36) formal_parameter -> empty .

    SEMICOLON       reduce using rule 36 (formal_parameter -> empty .)
    COLON           reduce using rule 36 (formal_parameter -> empty .)


state 96

    (34) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 127


state 97

    (21) var_declaration -> var_declaration SEMICOLON idlist COLON . type
    (22) type -> . basic_type
    (23) type -> . ARRAY LBRACKET period RBRACKET OF basic_type
    (24) basic_type -> . INTEGER
    (25) basic_type -> . REAL
    (26) basic_type -> . BOOLEAN
    (27) basic_type -> . CHAR

    ARRAY           shift and go to state 61
    INTEGER         shift and go to state 62
    REAL            shift and go to state 63
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 65

    type                           shift and go to state 128
    basic_type                     shift and go to state 60

state 98

    (23) type -> ARRAY LBRACKET . period RBRACKET OF basic_type
    (28) period -> . DIGITS DOT DIGITS
    (29) period -> . period COM DIGITS DOT DIGITS

    DIGITS          shift and go to state 130

    period                         shift and go to state 129

state 99

    (11) const_declaration -> const_declaration SEMICOLON ID EQUAL const_value .

    SEMICOLON       reduce using rule 11 (const_declaration -> const_declaration SEMICOLON ID EQUAL const_value .)


state 100

    (17) fraction -> POINT DIGITS .

    SEMICOLON       reduce using rule 17 (fraction -> POINT DIGITS .)
    MULOP           reduce using rule 17 (fraction -> POINT DIGITS .)
    RELOP           reduce using rule 17 (fraction -> POINT DIGITS .)
    ADDOP           reduce using rule 17 (fraction -> POINT DIGITS .)
    THEN            reduce using rule 17 (fraction -> POINT DIGITS .)
    END             reduce using rule 17 (fraction -> POINT DIGITS .)
    ELSE            reduce using rule 17 (fraction -> POINT DIGITS .)
    RPAREN          reduce using rule 17 (fraction -> POINT DIGITS .)
    COM             reduce using rule 17 (fraction -> POINT DIGITS .)
    RBRACKET        reduce using rule 17 (fraction -> POINT DIGITS .)
    TO              reduce using rule 17 (fraction -> POINT DIGITS .)
    DO              reduce using rule 17 (fraction -> POINT DIGITS .)


state 101

    (46) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 46 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 46 (statement_list -> statement_list SEMICOLON statement .)


state 102

    (48) statement -> variable ASSIGNOP expression .

    END             reduce using rule 48 (statement -> variable ASSIGNOP expression .)
    SEMICOLON       reduce using rule 48 (statement -> variable ASSIGNOP expression .)
    ELSE            reduce using rule 48 (statement -> variable ASSIGNOP expression .)


state 103

    (49) statement -> func_id ASSIGNOP expression .

    END             reduce using rule 49 (statement -> func_id ASSIGNOP expression .)
    SEMICOLON       reduce using rule 49 (statement -> func_id ASSIGNOP expression .)
    ELSE            reduce using rule 49 (statement -> func_id ASSIGNOP expression .)


state 104

    (53) statement -> IF expression THEN . statement else_part
    (47) statement -> . empty
    (48) statement -> . variable ASSIGNOP expression
    (49) statement -> . func_id ASSIGNOP expression
    (51) statement -> . procedure_call
    (52) statement -> . compound_statement
    (53) statement -> . IF expression THEN statement else_part
    (54) statement -> . FOR ID ASSIGNOP expression TO expression DO statement
    (55) statement -> . READ LPAREN variable_list RPAREN
    (56) statement -> . WRITE LPAREN expression_list RPAREN
    (5) empty -> .
    (59) variable -> . ID id_varpart
    (50) func_id -> . ID
    (62) procedure_call -> . ID
    (63) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 50
    FOR             shift and go to state 51
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    ELSE            reduce using rule 5 (empty -> .)
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ID              shift and go to state 52
    BEGIN           shift and go to state 29

    statement                      shift and go to state 131
    empty                          shift and go to state 45
    variable                       shift and go to state 46
    func_id                        shift and go to state 47
    procedure_call                 shift and go to state 48
    compound_statement             shift and go to state 49

state 105

    (69) expression -> simple_expression RELOP . simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    simple_expression              shift and go to state 132
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 106

    (71) simple_expression -> simple_expression ADDOP . term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    term                           shift and go to state 133
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 107

    (73) term -> term MULOP . factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    factor                         shift and go to state 134
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 108

    (79) factor -> ADDOP factor .

    MULOP           reduce using rule 79 (factor -> ADDOP factor .)
    RELOP           reduce using rule 79 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 79 (factor -> ADDOP factor .)
    THEN            reduce using rule 79 (factor -> ADDOP factor .)
    END             reduce using rule 79 (factor -> ADDOP factor .)
    SEMICOLON       reduce using rule 79 (factor -> ADDOP factor .)
    ELSE            reduce using rule 79 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 79 (factor -> ADDOP factor .)
    COM             reduce using rule 79 (factor -> ADDOP factor .)
    RBRACKET        reduce using rule 79 (factor -> ADDOP factor .)
    TO              reduce using rule 79 (factor -> ADDOP factor .)
    DO              reduce using rule 79 (factor -> ADDOP factor .)


state 109

    (76) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 135


state 110

    (77) factor -> ID LPAREN . expression_list RPAREN
    (66) expression_list -> . expression
    (67) expression_list -> . expression_list COM expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression_list                shift and go to state 136
    expression                     shift and go to state 114
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 111

    (78) factor -> NOT factor .

    MULOP           reduce using rule 78 (factor -> NOT factor .)
    RELOP           reduce using rule 78 (factor -> NOT factor .)
    ADDOP           reduce using rule 78 (factor -> NOT factor .)
    THEN            reduce using rule 78 (factor -> NOT factor .)
    END             reduce using rule 78 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 78 (factor -> NOT factor .)
    ELSE            reduce using rule 78 (factor -> NOT factor .)
    RPAREN          reduce using rule 78 (factor -> NOT factor .)
    COM             reduce using rule 78 (factor -> NOT factor .)
    RBRACKET        reduce using rule 78 (factor -> NOT factor .)
    TO              reduce using rule 78 (factor -> NOT factor .)
    DO              reduce using rule 78 (factor -> NOT factor .)


state 112

    (54) statement -> FOR ID ASSIGNOP . expression TO expression DO statement
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 137
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 113

    (63) procedure_call -> ID LPAREN expression_list . RPAREN
    (67) expression_list -> expression_list . COM expression

    RPAREN          shift and go to state 138
    COM             shift and go to state 139


state 114

    (66) expression_list -> expression .

    RPAREN          reduce using rule 66 (expression_list -> expression .)
    COM             reduce using rule 66 (expression_list -> expression .)
    RBRACKET        reduce using rule 66 (expression_list -> expression .)


state 115

    (61) id_varpart -> LBRACKET expression_list . RBRACKET
    (67) expression_list -> expression_list . COM expression

    RBRACKET        shift and go to state 140
    COM             shift and go to state 139


state 116

    (55) statement -> READ LPAREN variable_list . RPAREN
    (58) variable_list -> variable_list . COM variable

    RPAREN          shift and go to state 141
    COM             shift and go to state 142


state 117

    (57) variable_list -> variable .

    RPAREN          reduce using rule 57 (variable_list -> variable .)
    COM             reduce using rule 57 (variable_list -> variable .)


state 118

    (59) variable -> ID . id_varpart
    (60) id_varpart -> . empty
    (61) id_varpart -> . LBRACKET expression_list RBRACKET
    (5) empty -> .

    LBRACKET        shift and go to state 88
    RPAREN          reduce using rule 5 (empty -> .)
    COM             reduce using rule 5 (empty -> .)

    id_varpart                     shift and go to state 85
    empty                          shift and go to state 87

state 119

    (56) statement -> WRITE LPAREN expression_list . RPAREN
    (67) expression_list -> expression_list . COM expression

    RPAREN          shift and go to state 143
    COM             shift and go to state 139


state 120

    (43) subprogram_body -> const_declarations var_declarations . compound_statement
    (44) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 29

    compound_statement             shift and go to state 144

state 121

    (35) formal_parameter -> LPAREN parameter_list . RPAREN
    (38) parameter_list -> parameter_list . SEMICOLON parameter

    RPAREN          shift and go to state 145
    SEMICOLON       shift and go to state 146


state 122

    (37) parameter_list -> parameter .

    RPAREN          reduce using rule 37 (parameter_list -> parameter .)
    SEMICOLON       reduce using rule 37 (parameter_list -> parameter .)


state 123

    (39) parameter -> var_parameter .

    RPAREN          reduce using rule 39 (parameter -> var_parameter .)
    SEMICOLON       reduce using rule 39 (parameter -> var_parameter .)


state 124

    (40) parameter -> value_parameter .

    RPAREN          reduce using rule 40 (parameter -> value_parameter .)
    SEMICOLON       reduce using rule 40 (parameter -> value_parameter .)


state 125

    (41) var_parameter -> VAR . value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    ID              shift and go to state 17

    value_parameter                shift and go to state 147
    idlist                         shift and go to state 126

state 126

    (42) value_parameter -> idlist . COLON basic_type
    (7) idlist -> idlist . COM ID

    COLON           shift and go to state 148
    COM             shift and go to state 26


state 127

    (34) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (24) basic_type -> . INTEGER
    (25) basic_type -> . REAL
    (26) basic_type -> . BOOLEAN
    (27) basic_type -> . CHAR

    INTEGER         shift and go to state 62
    REAL            shift and go to state 63
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 65

    basic_type                     shift and go to state 149

state 128

    (21) var_declaration -> var_declaration SEMICOLON idlist COLON type .

    SEMICOLON       reduce using rule 21 (var_declaration -> var_declaration SEMICOLON idlist COLON type .)


state 129

    (23) type -> ARRAY LBRACKET period . RBRACKET OF basic_type
    (29) period -> period . COM DIGITS DOT DIGITS

    RBRACKET        shift and go to state 150
    COM             shift and go to state 151


state 130

    (28) period -> DIGITS . DOT DIGITS

    DOT             shift and go to state 152


state 131

    (53) statement -> IF expression THEN statement . else_part
    (64) else_part -> . ELSE statement
    (65) else_part -> . empty
    (5) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 154
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)

  ! ELSE            [ reduce using rule 5 (empty -> .) ]

    else_part                      shift and go to state 153
    empty                          shift and go to state 155

state 132

    (69) expression -> simple_expression RELOP simple_expression .
    (71) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    SEMICOLON       reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    COM             reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    RBRACKET        reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 69 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 106


state 133

    (71) simple_expression -> simple_expression ADDOP term .
    (73) term -> term . MULOP factor

    RELOP           reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    SEMICOLON       reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    COM             reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    RBRACKET        reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 71 (simple_expression -> simple_expression ADDOP term .)
    MULOP           shift and go to state 107


state 134

    (73) term -> term MULOP factor .

    MULOP           reduce using rule 73 (term -> term MULOP factor .)
    RELOP           reduce using rule 73 (term -> term MULOP factor .)
    ADDOP           reduce using rule 73 (term -> term MULOP factor .)
    THEN            reduce using rule 73 (term -> term MULOP factor .)
    END             reduce using rule 73 (term -> term MULOP factor .)
    SEMICOLON       reduce using rule 73 (term -> term MULOP factor .)
    ELSE            reduce using rule 73 (term -> term MULOP factor .)
    RPAREN          reduce using rule 73 (term -> term MULOP factor .)
    COM             reduce using rule 73 (term -> term MULOP factor .)
    RBRACKET        reduce using rule 73 (term -> term MULOP factor .)
    TO              reduce using rule 73 (term -> term MULOP factor .)
    DO              reduce using rule 73 (term -> term MULOP factor .)


state 135

    (76) factor -> LPAREN expression RPAREN .

    MULOP           reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    COM             reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 76 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 76 (factor -> LPAREN expression RPAREN .)


state 136

    (77) factor -> ID LPAREN expression_list . RPAREN
    (67) expression_list -> expression_list . COM expression

    RPAREN          shift and go to state 156
    COM             shift and go to state 139


state 137

    (54) statement -> FOR ID ASSIGNOP expression . TO expression DO statement

    TO              shift and go to state 157


state 138

    (63) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 63 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 63 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 63 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 139

    (67) expression_list -> expression_list COM . expression
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 158
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 140

    (61) id_varpart -> LBRACKET expression_list RBRACKET .

    ASSIGNOP        reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    MULOP           reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    RELOP           reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    ADDOP           reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    END             reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    COM             reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 61 (id_varpart -> LBRACKET expression_list RBRACKET .)


state 141

    (55) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 55 (statement -> READ LPAREN variable_list RPAREN .)
    SEMICOLON       reduce using rule 55 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 55 (statement -> READ LPAREN variable_list RPAREN .)


state 142

    (58) variable_list -> variable_list COM . variable
    (59) variable -> . ID id_varpart

    ID              shift and go to state 118

    variable                       shift and go to state 159

state 143

    (56) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 56 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 56 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 56 (statement -> WRITE LPAREN expression_list RPAREN .)


state 144

    (43) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMICOLON       reduce using rule 43 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 145

    (35) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 35 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 35 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 146

    (38) parameter_list -> parameter_list SEMICOLON . parameter
    (39) parameter -> . var_parameter
    (40) parameter -> . value_parameter
    (41) var_parameter -> . VAR value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (6) idlist -> . ID
    (7) idlist -> . idlist COM ID

    VAR             shift and go to state 125
    ID              shift and go to state 17

    parameter                      shift and go to state 160
    var_parameter                  shift and go to state 123
    value_parameter                shift and go to state 124
    idlist                         shift and go to state 126

state 147

    (41) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 41 (var_parameter -> VAR value_parameter .)
    SEMICOLON       reduce using rule 41 (var_parameter -> VAR value_parameter .)


state 148

    (42) value_parameter -> idlist COLON . basic_type
    (24) basic_type -> . INTEGER
    (25) basic_type -> . REAL
    (26) basic_type -> . BOOLEAN
    (27) basic_type -> . CHAR

    INTEGER         shift and go to state 62
    REAL            shift and go to state 63
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 65

    basic_type                     shift and go to state 161

state 149

    (34) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMICOLON       reduce using rule 34 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 150

    (23) type -> ARRAY LBRACKET period RBRACKET . OF basic_type

    OF              shift and go to state 162


state 151

    (29) period -> period COM . DIGITS DOT DIGITS

    DIGITS          shift and go to state 163


state 152

    (28) period -> DIGITS DOT . DIGITS

    DIGITS          shift and go to state 164


state 153

    (53) statement -> IF expression THEN statement else_part .

    END             reduce using rule 53 (statement -> IF expression THEN statement else_part .)
    SEMICOLON       reduce using rule 53 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 53 (statement -> IF expression THEN statement else_part .)


state 154

    (64) else_part -> ELSE . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGNOP expression
    (49) statement -> . func_id ASSIGNOP expression
    (51) statement -> . procedure_call
    (52) statement -> . compound_statement
    (53) statement -> . IF expression THEN statement else_part
    (54) statement -> . FOR ID ASSIGNOP expression TO expression DO statement
    (55) statement -> . READ LPAREN variable_list RPAREN
    (56) statement -> . WRITE LPAREN expression_list RPAREN
    (5) empty -> .
    (59) variable -> . ID id_varpart
    (50) func_id -> . ID
    (62) procedure_call -> . ID
    (63) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 50
    FOR             shift and go to state 51
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    ELSE            reduce using rule 5 (empty -> .)
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ID              shift and go to state 52
    BEGIN           shift and go to state 29

    statement                      shift and go to state 165
    empty                          shift and go to state 45
    variable                       shift and go to state 46
    func_id                        shift and go to state 47
    procedure_call                 shift and go to state 48
    compound_statement             shift and go to state 49

state 155

    (65) else_part -> empty .

    ELSE            reduce using rule 65 (else_part -> empty .)
    END             reduce using rule 65 (else_part -> empty .)
    SEMICOLON       reduce using rule 65 (else_part -> empty .)


state 156

    (77) factor -> ID LPAREN expression_list RPAREN .

    MULOP           reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    COM             reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 77 (factor -> ID LPAREN expression_list RPAREN .)


state 157

    (54) statement -> FOR ID ASSIGNOP expression TO . expression DO statement
    (68) expression -> . simple_expression
    (69) expression -> . simple_expression RELOP simple_expression
    (70) simple_expression -> . term
    (71) simple_expression -> . simple_expression ADDOP term
    (72) term -> . factor
    (73) term -> . term MULOP factor
    (74) factor -> . num
    (75) factor -> . variable
    (76) factor -> . LPAREN expression RPAREN
    (77) factor -> . ID LPAREN expression_list RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . ADDOP factor
    (15) num -> . DIGITS fraction
    (16) num -> . DIGITS
    (59) variable -> . ID id_varpart

    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    NOT             shift and go to state 83
    ADDOP           shift and go to state 77
    DIGITS          shift and go to state 40

    expression                     shift and go to state 166
    simple_expression              shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 78
    num                            shift and go to state 79
    variable                       shift and go to state 80

state 158

    (67) expression_list -> expression_list COM expression .

    RPAREN          reduce using rule 67 (expression_list -> expression_list COM expression .)
    COM             reduce using rule 67 (expression_list -> expression_list COM expression .)
    RBRACKET        reduce using rule 67 (expression_list -> expression_list COM expression .)


state 159

    (58) variable_list -> variable_list COM variable .

    RPAREN          reduce using rule 58 (variable_list -> variable_list COM variable .)
    COM             reduce using rule 58 (variable_list -> variable_list COM variable .)


state 160

    (38) parameter_list -> parameter_list SEMICOLON parameter .

    RPAREN          reduce using rule 38 (parameter_list -> parameter_list SEMICOLON parameter .)
    SEMICOLON       reduce using rule 38 (parameter_list -> parameter_list SEMICOLON parameter .)


state 161

    (42) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 42 (value_parameter -> idlist COLON basic_type .)
    SEMICOLON       reduce using rule 42 (value_parameter -> idlist COLON basic_type .)


state 162

    (23) type -> ARRAY LBRACKET period RBRACKET OF . basic_type
    (24) basic_type -> . INTEGER
    (25) basic_type -> . REAL
    (26) basic_type -> . BOOLEAN
    (27) basic_type -> . CHAR

    INTEGER         shift and go to state 62
    REAL            shift and go to state 63
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 65

    basic_type                     shift and go to state 167

state 163

    (29) period -> period COM DIGITS . DOT DIGITS

    DOT             shift and go to state 168


state 164

    (28) period -> DIGITS DOT DIGITS .

    RBRACKET        reduce using rule 28 (period -> DIGITS DOT DIGITS .)
    COM             reduce using rule 28 (period -> DIGITS DOT DIGITS .)


state 165

    (64) else_part -> ELSE statement .

    ELSE            reduce using rule 64 (else_part -> ELSE statement .)
    END             reduce using rule 64 (else_part -> ELSE statement .)
    SEMICOLON       reduce using rule 64 (else_part -> ELSE statement .)


state 166

    (54) statement -> FOR ID ASSIGNOP expression TO expression . DO statement

    DO              shift and go to state 169


state 167

    (23) type -> ARRAY LBRACKET period RBRACKET OF basic_type .

    SEMICOLON       reduce using rule 23 (type -> ARRAY LBRACKET period RBRACKET OF basic_type .)


state 168

    (29) period -> period COM DIGITS DOT . DIGITS

    DIGITS          shift and go to state 170


state 169

    (54) statement -> FOR ID ASSIGNOP expression TO expression DO . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGNOP expression
    (49) statement -> . func_id ASSIGNOP expression
    (51) statement -> . procedure_call
    (52) statement -> . compound_statement
    (53) statement -> . IF expression THEN statement else_part
    (54) statement -> . FOR ID ASSIGNOP expression TO expression DO statement
    (55) statement -> . READ LPAREN variable_list RPAREN
    (56) statement -> . WRITE LPAREN expression_list RPAREN
    (5) empty -> .
    (59) variable -> . ID id_varpart
    (50) func_id -> . ID
    (62) procedure_call -> . ID
    (63) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 50
    FOR             shift and go to state 51
    READ            shift and go to state 53
    WRITE           shift and go to state 54
    ELSE            reduce using rule 5 (empty -> .)
    END             reduce using rule 5 (empty -> .)
    SEMICOLON       reduce using rule 5 (empty -> .)
    ID              shift and go to state 52
    BEGIN           shift and go to state 29

    statement                      shift and go to state 171
    empty                          shift and go to state 45
    variable                       shift and go to state 46
    func_id                        shift and go to state 47
    procedure_call                 shift and go to state 48
    compound_statement             shift and go to state 49

state 170

    (29) period -> period COM DIGITS DOT DIGITS .

    RBRACKET        reduce using rule 29 (period -> period COM DIGITS DOT DIGITS .)
    COM             reduce using rule 29 (period -> period COM DIGITS DOT DIGITS .)


state 171

    (54) statement -> FOR ID ASSIGNOP expression TO expression DO statement .

    END             reduce using rule 54 (statement -> FOR ID ASSIGNOP expression TO expression DO statement .)
    SEMICOLON       reduce using rule 54 (statement -> FOR ID ASSIGNOP expression TO expression DO statement .)
    ELSE            reduce using rule 54 (statement -> FOR ID ASSIGNOP expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 131 resolved as shift
WARNING: reduce/reduce conflict in state 52 resolved using rule (empty -> <empty>)
WARNING: rejected rule (func_id -> ID) in state 52
WARNING: Rule (func_id -> ID) is never reduced
